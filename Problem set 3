from math import pi, sin
import math
class F(object):
    def __init__(self,a,w):
        self.a=a
        self.w=w  # we define there that the value a, w (we are going to submit) are attribute for this instance, self is the instance
    def function(self,x):
        result=math.exp(-self.a*self.w)*math.sin(self.w*x)
        return "Your result is: "+ str(result)
f1=F(5,6)
print(f1.function(2))
class F2(object):
    def __init__(self,a,w):
        self.a=a
        self.w=w  # we define there that the value a, w (we are going to submit) are attribute for this instance, self is the instance
    def function(self,x):
        result=math.exp(-self.a*self.w)*math.sin(self.w*x)
        return "Your result is: "+ str(result)
f2=F(a=5,w=6)
print(f2.function(2))

if f2.function(2)==f1.function(2):
    print("Your functions are both well defined")
else:
    print("They are not well defined")





# ex 2 chat gpt

class Account:
    def __init__(self, name, account_number, initial_amount):
        self.name = name
        self.no = account_number
        self.balance = initial_amount
        self.transaction=0 # we set that to zero
    
    def deposit(self, amount): # you have to give this variable because its not an attribute of 
        # your classe , same as function from ex 1 
        self.balance += amount
        self.transaction+=1
    
    def withdraw(self, amount):
        self.balance -= amount
        self.transaction+=1
    
    def dump(self):
        s="Name "+str(self.name)+" , account number : " +str(self.no)+ ", balance : "+ str(self.balance)+ ", number of transactions : "+ str(self.transaction)
        return s 
    
# Instantiate the Account objects
a1 = Account('John Olsson', '19371554951', 20000) 
a2 = Account('Liz Olsson', '19371564761', 20000)

# Perform transactions
a1.deposit(1000)
a1.withdraw(4000)
a2.withdraw(10500)
a1.withdraw(3500)

# Print balances
print("a1’s balance:", a1.balance)
print("a2’s balance:", a2.balance)

# Dump account details
print(a1.dump())
print(a2.dump())

#Add an attribute transactions to the Account class from above. The new attribute counts the 
#number of transactions done in the deposit and withdraw methods. The total number of transactions
#should be printed in the dump method. Write a simple test program to demonstrate that transaction 
#gets the right value after some calls to deposit and withdraw




# The key to understand is that, the once you have defined your object and created an instance,
# all the operation you perform on your instance will be captured and you can use incrementation during this process

# ex 3 

class line_class (object):
    def __init__(self,p1,p2): # Assigning to an instance in Python means attaching a value or object to a specific instance of a class. When you create an instance of a class, it's like creating a container for all the attributes and methods defined within that class. 
        #Each instance has its own set of attributes and methods that are independent of other instances of the same class. # you can think of init as empty list you fill with object of your instance
        self.p1=p1
        self.p2=p2
        self.x1, self.y1=p1
        self.x2, self.y2=p2
    
    def pres(self):  # when you do so, you put self as argument, self represent the var assigned to this instance 
        return "p1 is "+ str(self.p1) + "and p2 is "+ str(self.p2)
    
    def slope_function(self):
        slope=(self.x1-self.x2)/(self.y1-self.y2)
        return slope
    
    def intercept_function(self):
        slope=self.slope_function()
        intercept=self.y1-self.x1*slope
        return intercept
    
    def value_pointx(self,x):
        slope=self.slope_function()
        intercept=self.intercept_function()
        y=intercept+ slope*x
        return "The value of the function at "+ str(x) +" is "+ str(y)
    
    def summary_function(self):
        slope=self.slope_function()
        intercept=self.intercept_function()
    
        return "With the following points : "+ str(self.p1)+" , "+ str(self.p2) + ", we have a slope of : " + str(slope) + " and an intercept of : "+ str(intercept)
    
    
p1=(3,8)
p2=(2,-5)
x1 = line_class(p1,p2)
print(x1.pres())
print(x1.summary_function())
print(x1.value_pointx(20))



# ex 4

print(f(5))

class central(object):
    def __init__(self,f,h):
        self.f=f
        self.h=h
    def pres(self):
        return " My function is "+ str(self.f)+ " and my approx. error h is : " + str(self.h)
    
    def value_function(self,x):
        return " My function evaluated at " + str(x) + " is equal to " + str(self.f(x))
    
    def derivative_approx(self,x):
        result = (f(x+self.h)-f(x-self.h))/(2*self.h)
        return "The derivative of the log function evaluated at "+ str(x) + " is: " + str(result)+ " with the approx. error " + str(self.h)

import math 

f = lambda x: math.log(x)  # this line define an anonymous function log (x) which defined as f 

logfunction=central(f,0.5)
print(logfunction.pres())
print(logfunction.value_function(1))
print(logfunction.derivative_approx(1))


for i in (0.5,0.1,10**-3,10**-5,10**-7,10**-9,10**-11):
    logfunction=central(f,i)
    print(logfunction.derivative_approx(1))
    
  

    

        
        
        
    


